{"version":3,"sources":["webpack:///./node_modules/stats-lite/stats.js","webpack:///./src/views/Experiments.vue?16a8","webpack:///./src/views/Experiments.vue?6259","webpack:///src/views/Experiments.vue","webpack:///./src/views/Experiments.vue?1b9a","webpack:///./src/views/Experiments.vue?e22b","webpack:///./node_modules/isnumber/index.js","webpack:///./src/mixins/graph-setup.js","webpack:///./node_modules/ac-colors/index.min.js"],"names":["module","exports","numbers","sum","mean","median","mode","variance","populationVariance","sampleVariance","stdev","populationStdev","sampleStdev","percentile","histogram","isNumber","vals","nums","i","length","push","nsort","sort","a","b","total","NaN","half","dist","value","me","rank","Object","keys","modes","Set","modeCount","add","valuesMinusMeanSquared","avg","diffs","Math","pow","sqrt","ptile","int_part","fract","min","bins","round","max","range","binWidth","midpoint","leftEdge","floor","hist","values","Array","fill","binLimits","binIndex","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","name","params","id","on","setTimeRange","_l","graph","directives","rawName","data","expression","key","layout","spinner","_e","exp","_v","_s","description","experimentDescriptions","message","staticRenderFns","mixins","graphColor","timeRange","toTime","fromTime","components","computed","query","rangeDropdownOptions","experimentIDs","methods","processLatencyTimeData","show","latencyTimeResults","timestamp","latency","sendTime","jsonDataRows","addLatencyTimeRecord","processedRows","x","y","line","color","marker","width","processLatencyHourlyData","latencyHourlyResults","addLatencyHourlyRecord","prevLatency","processBandwidthTimeData","bandwidthTimeResults","addBandwidthTimeRecord","type","bandwidthTimeData","processBandwidthHourlyData","bandwidthHourlyResults","addBandwidthHourlyRecord","meanBandwidthHourlyResults","prevAvgBandwidth","stdevBandwidthHourlyResults","prevStdevBandwidth","error_y","array","visible","processRTTTimeData","rttTimeResults","rtt","addRTTTimeRecord","rttTimeData","processRTTHourlyData","rttHourlyResults","addRTTHourlyRecord","console","prevAvgRTT","prevStdevRTT","initGraphData","f","category","spinnerList","acc","row","graphList","watch","immediate","deep","component","n","isNaN","parseFloat","isFinite","cdfSubdivisions","Color","latencyHourlySpinner","latencyHourlyData","latencyHourlyLayout","latencyTimeSpinner","latencyTimeData","latencyTimeLayout","latencyTimeCDFData","latencyTimeCDFLayout","bandwidthTimeSpinner","bandwidthTimeLayout","bandwidthTimeCDFData","bandwidthTimeCDFLayout","bandwidthHourlySpinner","bandwidthHourlyData","bandwidthHourlyLayout","rttTimeSpinner","rttTimeLayout","rttHourlySpinner","rttHourlyData","rttHourlyLayout","endpointGraphs","_defineProperties","o","r","t","e","enumerable","configurable","writable","defineProperty","_createClass","prototype","precision","capitalize","l","u","s","updateColor","TypeError","toLowerCase","validTypes","includes","rgbToXyz","hslToRgb","hexToRgb","labToXyz","lchABToLab","luvToXyz","lchUVToLuv","_xyz","_rgb","xyzToRgb","_hsl","rgbToHsl","_hex","rgbToHex","_lab","xyzToLab","_lchab","labToLCHab","_luv","xyzToLuv","_lchuv","luvToLCHuv","abs","map","S","toString","replace","exec","parseInt","ea","ta","Fa","d65","cbrt","c","maxZeroTolerance","atan2","PI","cos","sin","h","C","p","luminance","rgb","random","randomFromString","mc","charCodeAt","randomOfType","randomOfTypeFormatted","contrastTextColor","contrastRatio","get","set","join","toUpperCase","hsl","toFixed","xyz","lab","lchab","luv","lchuv"],"mappings":"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,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,cAMA,8BACA,gCACA,iCAEAC,4BACA,2BAAAd,QAAAd,2BACA,gCACA,kCACA,WACA,UACA,MACA,OACA6B,0BACAA,uBAIA,0BACA,oBACA,MACA,2BAEA,oBACAA,kBAIA,QACAV,cACA,mBACAW,8BAEAA,kBAEA,2BACAhB,QACAd,wDAEAqB,MAEAhF,2BACA,WACAwF,kBACA,yBACA,eACA,SAEA,oBAEA,OADAE,IACA,MAGA,wDACA,+BACA,UACA,qCACA1F,2BACA,oCACA,kCACAiF,IACAC,OACA3C,OACAjE,qBACA6G,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,cAMA,gCACA,kCACA,mCAGAK,4BACA,2BAAAlB,QAAAd,2BACA,gCACA,kCACA,WACA,UACAiC,YACA,cACA,cAIA,2BACA,oDAEA,4BACAA,sBAEA,6BACAjB,YACAE,aAEAe,qBAEA,4BACAjB,YACAE,eAKA,QACAC,cACAe,kBACA,2BACApB,QACAd,wDAEAqB,MAEA,wDACA,+BACA,UACAhF,2BACA,aACA,8BACA,uDAAA8F,eACA,QACA9F,+BAEA+F,wCACA,2BACA,kCACAd,2BACAC,2BACA3C,eACAjE,qBACA6G,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,gBAOA,gCACA,kCACA,mCAEAU,8BACA,6BAAAvB,QAAAd,2BACA,kCACA,oCACA,mGACA,KACA,MACA,eACAsC,kCACAA,uCAEA,cACAA,iCACAA,qCAIA,2BACA,2BAEA,4BAEAA,yCACAA,yCAIA,QACAnB,cACA,mBACAoB,UAEA,6BACAzB,QACAd,wDAEAqB,MAEA,WAEA,KACAhF,2BACA,WACA,OACAmG,kBACA,yBACA,eACA,SAEA,oBAEA,OADAC,IACA,IAEAC,kBACA,yBACA,eACA,SAEA,2BAEA,OADAC,IACA,MAGA,0DACA,iCACA,UACA,qCACAtG,+BACA,wDACA,oCACAiF,IACAC,OACAqB,SACAT,YACAU,WACAC,YAEAlE,OACAjE,qBACA6G,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,cAMA,kCACA,oCACA,qCAEAoB,sBACA,qBAAAjC,QAAAd,2BACA,0BACA,4BACA,WACA,UACA,MAEA,2BACA,qBACA,MACA,oDAEA,WACA,OACAgD,SAEAA,WACAhC,YACAiC,MACA/B,gBAKA,QACAC,cACA,mBACA+B,8BAEAA,kBAEA,qBACApC,QACAd,wDAEAqB,MAEA,kDACA,yBACA,UAEAhF,2BACA,oCACA,OACA8G,qCACA,4BACA7B,wBACAC,kBACA3C,OACAjE,qBACA6G,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,cAMA,0BACA,4BACA,6BAEAyB,wBACA,uBAAAtC,QAAAd,2BACA,4BACA,8BACA,WACA,UAKA,GAJA,OACAqD,0BACAA,uBAEA,GAEA,2BACA,qBACA,MACA,2BAEA,oBACAA,kBAIA,QACAlC,cACA,mBACAmC,8BAEAA,kBAEA,uBACAxC,QACAd,wDAEAqB,MAEA,WACA,OACAkC,eACA,oDACA,2BACA,UACA,qCACAlH,2BACA,aACA,YACA,yBACA,eACA,SAEA,oBAEA,OADAmH,IACA,IAEA,YACA,yBACA,eACA,SAEA,2BAEA,OADAC,IACA,IAEA,8BACA,8BACAnC,IACAC,IACAqB,SACAT,YACAU,QACAC,YAEAlE,OACAjE,qBACA6G,MACAC,mBAEAC,QACAD,sBACAD,MACAC,kBACAE,cAMA,4BACA,8BACA,+BAEA+B,gBACA,SACA,yBAEA,GACA,CACAC,8BACAtE,0BACAuE,oBAEA,CACAD,gCACAtE,4BACAuE,oBAEA,CACAD,gCACAtE,4BACAuE,sBAEA,CACAD,kCACAtE,8BACAuE,sBAEA,CACAD,0BACAtE,sBACAuE,gBAEA,CACAD,4BACAtE,wBACAuE,iBAGAC,cACApE,UACAA,+BAEA,WAAAY,WAAAC,GAAA,eAEAA,cAEAD,0CACA,6CAEA,0CACA,8DAEA,8CACA,mDACA,sBACA,0CAKA,OAJAyD,MACA,sBACA,GAEA,GACA,IACA,cACA,sBAOA,OANAC,8BACAF,cACApE,UACAA,mFAGA,0BACA1B,yEAGAgG,wBACAA,oBA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","file":"js/chunk-000b9510.js","sourcesContent":["\"use strict\";\n\nmodule.exports.numbers = numbers\nmodule.exports.sum = sum\nmodule.exports.mean = mean\nmodule.exports.median = median\nmodule.exports.mode = mode\nmodule.exports.variance = populationVariance\nmodule.exports.sampleVariance = sampleVariance\nmodule.exports.populationVariance = populationVariance\nmodule.exports.stdev = populationStdev\nmodule.exports.sampleStdev = sampleStdev\nmodule.exports.populationStdev = populationStdev\nmodule.exports.percentile = percentile\nmodule.exports.histogram = histogram\n\nvar isNumber = require(\"isnumber\")\n\nfunction numbers(vals) {\n  var nums = []\n  if (vals == null)\n    return nums\n\n  for (var i = 0; i < vals.length; i++) {\n    if (isNumber(vals[i]))\n      nums.push(+vals[i])\n  }\n  return nums\n}\n\nfunction nsort(vals) {\n  return vals.sort(function numericSort(a, b) { return a - b })\n}\n\nfunction sum(vals) {\n  vals = numbers(vals)\n  var total = 0\n  for (var i = 0; i < vals.length; i++) {\n    total += vals[i]\n  }\n  return total\n}\n\nfunction mean(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n  return (sum(vals) / vals.length)\n}\n\nfunction median(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n\n  var half = (vals.length / 2) | 0\n\n  vals = nsort(vals)\n  if (vals.length % 2) {\n    // Odd length, true middle element\n    return vals[half]\n  }\n  else {\n    // Even length, average middle two elements\n    return (vals[half-1] + vals[half]) / 2.0\n  }\n}\n\n// Returns the mode of a unimodal dataset\n// If the dataset is multi-modal, returns a Set containing the modes\nfunction mode(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n  var mode = NaN\n  var dist = {}\n\n  for (var i = 0; i < vals.length; i++) {\n    var value = vals[i]\n    var me = dist[value] || 0\n    me++\n    dist[value] = me\n  }\n\n  var rank = numbers(Object.keys(dist).sort(function sortMembers(a, b) { return dist[b] - dist[a] }))\n  mode = rank[0]\n  if (dist[rank[1]] == dist[mode]) {\n    // multi-modal\n    if (rank.length == vals.length) {\n      // all values are modes\n      return vals\n    }\n    var modes = new Set([mode])\n    var modeCount = dist[mode]\n    for (var i = 1; i < rank.length; i++) {\n      if (dist[rank[i]] == modeCount) {\n        modes.add(rank[i])\n      }\n      else {\n        break\n      }\n    }\n    return modes\n  }\n  return mode\n}\n\n// This helper finds the mean of all the values, then squares the difference\n// from the mean for each value and returns the resulting array.  This is the\n// core of the varience functions - the difference being dividing by N or N-1.\nfunction valuesMinusMeanSquared(vals) {\n  vals = numbers(vals)\n  var avg = mean(vals)\n  var diffs = []\n  for (var i = 0; i < vals.length; i++) {\n    diffs.push(Math.pow((vals[i] - avg), 2))\n  }\n  return diffs\n}\n\n// Population Variance = average squared deviation from mean\nfunction populationVariance(vals) {\n  return mean(valuesMinusMeanSquared(vals))\n}\n\n// Sample Variance\nfunction sampleVariance(vals) {\n  var diffs = valuesMinusMeanSquared(vals)\n  if (diffs.length <= 1) return NaN\n\n  return sum(diffs) / (diffs.length - 1)\n}\n\n\n// Population Standard Deviation = sqrt of population variance\nfunction populationStdev(vals) {\n  return Math.sqrt(populationVariance(vals))\n}\n\n// Sample Standard Deviation = sqrt of sample variance\nfunction sampleStdev(vals) {\n  return Math.sqrt(sampleVariance(vals))\n}\n\nfunction percentile(vals, ptile) {\n  vals = numbers(vals)\n  if (vals.length === 0 || ptile == null || ptile < 0) return NaN\n\n  // Fudge anything over 100 to 1.0\n  if (ptile > 1) ptile = 1\n  vals = nsort(vals)\n  var i = (vals.length * ptile) - 0.5\n  if ((i | 0) === i) return vals[i]\n  // interpolated percentile -- using Estimation method\n  var int_part = i | 0\n  var fract = i - int_part\n  return (1 - fract) * vals[int_part] + fract * vals[Math.min(int_part + 1, vals.length - 1)]\n}\n\nfunction histogram (vals, bins) {\n  if (vals == null) {\n    return null\n  }\n  vals = nsort(numbers(vals))\n  if (vals.length === 0) {\n    return null\n  }\n  if (bins == null) {\n    // pick bins by simple method: Math.sqrt(n)\n    bins = Math.sqrt(vals.length)\n  }\n  bins = Math.round(bins)\n  if (bins < 1) {\n    bins = 1\n  }\n\n  var min = vals[0]\n  var max = vals[vals.length - 1]\n  if (min === max) {\n    // fudge for non-variant data\n    min = min - 0.5\n    max = max + 0.5\n  }\n\n  var range = (max - min)\n  // make the bins slightly larger by expanding the range about 10%\n  // this helps with dumb floating point stuff\n  var binWidth = (range + (range * 0.05)) / bins\n  var midpoint = (min + max) / 2\n  // even bin count, midpoint makes an edge\n  var leftEdge = midpoint - (binWidth * Math.floor(bins / 2))\n  if (bins % 2 !== 0) {\n    // odd bin count, center middle bin on midpoint\n    var leftEdge = (midpoint - (binWidth / 2)) - (binWidth * Math.floor(bins / 2))\n  }\n\n  var hist = {\n    values: Array(bins).fill(0),\n    bins: bins,\n    binWidth: binWidth,\n    binLimits: [leftEdge, leftEdge + (binWidth * bins)]\n  }\n\n  var binIndex = 0\n  for (var i = 0; i < vals.length; i++) {\n    while (vals[i] > (((binIndex + 1) * binWidth) + leftEdge)) {\n      binIndex++\n    }\n    hist.values[binIndex]++\n  }\n\n  return hist\n}\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Experiments.vue?vue&type=style&index=0&id=0e685306&prod&lang=scss&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',{staticClass:\"experiments\"},[_c('ac-grid',{attrs:{\"cols\":\"12\",\"align-h\":\"center\"}},[_c('ac-col',{attrs:{\"cols\":\"11\"}},[_c('date-range-dropdown',{attrs:{\"callback\":function (){},\"route\":{name:'Experiments',params:{id:this.params.id}}},on:{\"change\":_vm.setTimeRange}}),(_vm.experimentIDs)?_c('div',_vm._l((_vm.endpointGraphs),function(graph,i){return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(graph.data.visible),expression:\"graph.data.visible\"}],key:i,staticClass:\"graph-row\"},[_c('graph',{attrs:{\"data\":graph.data,\"layout\":graph.layout,\"spinner\":graph.spinner}})],1)}),0):_vm._e(),_c('ac-grid',_vm._l((_vm.experimentDescriptions),function(exp,i){return _c('ac-col',{key:i,attrs:{\"cols\":\"12\",\"md-cols\":\"6\",\"lg-cols\":\"4\",\"xl-cols\":\"3\"}},[_c('section',{staticClass:\"experiment-section\"},[_c('h2',{staticClass:\"experiment-section-name\"},[_vm._v(_vm._s(exp.name))]),_c('div',{staticClass:\"experiment-section-description\"},[_vm._v(_vm._s(exp.description))]),_c('router-link',{staticClass:\"experiment-section-link\",attrs:{\"to\":{name:'Experiments',params:{id:exp.name}}}},[_vm._v(\"View Graphs\")])],1)])}),1),(_vm.experimentDescriptions.length==0)?_c('div',[_c('graph',{attrs:{\"spinner\":{'show':true,message:'Fetching data...'}}})],1):_vm._e()],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <main class=\"experiments\">\n        <ac-grid cols=12 align-h=\"center\">\n            <ac-col cols=\"11\">\n                <date-range-dropdown :callback=\"()=>{}\" :route=\"{name:'Experiments',params:{id:this.params.id}}\"  v-on:change=\"setTimeRange\"></date-range-dropdown>\n                <div v-if='experimentIDs'>\n                    <div class=\"graph-row\" v-for=\"(graph,i) in endpointGraphs\" :key=\"i\"  v-show=\"graph.data.visible\">\n                        <graph :data=\"graph.data\" :layout=\"graph.layout\" :spinner=\"graph.spinner\" ></graph>\n                    </div>\n                </div>\n                <ac-grid>\n                    <ac-col cols=\"12\" md-cols=\"6\" lg-cols=\"4\" xl-cols=\"3\" v-for=\"(exp, i) in experimentDescriptions\" :key=\"i\">\n                        <section class=\"experiment-section\">\n                            <h2 class=\"experiment-section-name\">{{exp.name}}</h2>\n                            <div class=\"experiment-section-description\">{{exp.description}}</div>\n                            <router-link :to=\"{name:'Experiments',params:{id:exp.name}}\" class=\"experiment-section-link\">View Graphs</router-link>\n                        </section>\n                    </ac-col>\n                </ac-grid>\n                <div v-if=\"experimentDescriptions.length==0\">\n                    <graph :spinner=\"{'show':true,message:'Fetching data...'}\"></graph>\n                </div>\n            </ac-col>\n        </ac-grid>\n    </main>\n</template>\n<script type=\"text/javascript\">\n    import stats from \"stats-lite\"\n    import graph from \"@/components/graph\";\n    import dateRangeDropdown from \"@/components/date-range-dropdown\"\n    import moment from \"moment\"\n    import Color from \"ac-colors\"\n    import graphSetup from \"@/mixins/graph-setup.js\";\n    export default {\n        mixins:[graphSetup],\n        data(){\n            return {\n                graphColor:{\n                    \"primary\":new Color({\"type\":\"hex\", \"color\":\"#7FA44F\"}),\n                    \"secondary\":new Color({\"type\":\"hex\", \"color\":\"#989998\"})\n                },\n                timeRange:{toTime:null,fromTime:null},\n            }\n        },\n        components:{\n            \"date-range-dropdown\":dateRangeDropdown,\n            \"graph\":graph,\n        },\n        computed:{\n            params(){\n                return this.$route.params;\n            },\n            query(){\n                return this.$route.query;\n            },\n            rangeDropdownOptions(){\n                return Object.values(this.rangeValues)\n            },\n            experimentIDs(){\n                return (this.params.id!=null) ? [this.params.id] : null;\n            },\n            experimentDescriptions(){\n                return this.$store.state.experimentDescriptions || [];\n            }\n        },\n        methods:{\n            setTimeRange(range){\n                this.timeRange = range;\n            },\n            processLatencyTimeData(jsonDataRows){\n                this.latencyTimeSpinner={show:true, message:\"Sorting data...\"};\n                this.latencyTimeData.ready=false;\n                this.latencyTimeLayout.ready=false;\n                const latencyTimeResults = {}\n                const addLatencyTimeRecord = (record, index)=>{\n                    if(record){\n                        if(!latencyTimeResults[index]){\n                            latencyTimeResults[index] = []\n                        }\n                        // Time is in nanoseconds, convert to ms\n                        const sendTime = record.end_stime/(10**6);\n                        const recvTime = record.end_rtime/(10**6);\n                        const latency = (recvTime-sendTime);\n                        const timestamp = moment(sendTime,\"x\").utc().format(\"YYYY-MM-DD HH:mm:ss.SS\");\n                        // Verify data is properly parsed\n                        if(!isNaN(latency)){\n                            latencyTimeResults[index].push({\n                                timestamp,\n                                latency,\n                                sendTime\n                            });\n                        }\n                    }\n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    if(curr.exp==\"DNS_local\"){ \n                        addLatencyTimeRecord(curr.data.rst_list[0], curr.index)\n                    }else{\n                        addLatencyTimeRecord(curr.data, curr.index);\n                    }\n                    this.latencyTimeSpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                this.latencyTimeSpinner.message=\"Generating graph...\";\n                this.latencyTimeData.data=[];\n                const markerBorderWidth = 2;\n                Object.keys(latencyTimeResults).forEach((index)=>{\n                    // Sort records by sendTime\n                    latencyTimeResults[index].sort((a,b)=>a.sendTime-b.sendTime)\n                    const traceColor = Color.randomFromString(index+index+index);\n                    this.latencyTimeData.data.push({\n                        x:latencyTimeResults[index].map(record=>record.timestamp),\n                        y:latencyTimeResults[index].map(record=>record.latency),\n                        name:index,\n                        mode:\"lines+markers\",\n                        line:{\n                            color:traceColor.rgbString\n                        },\n                        marker:{\n                            color:\"rgba(0,0,0,0)\",\n                            line:{\n                                color:traceColor.rgbString,\n                                width:markerBorderWidth\n                            }\n                        }\n                    });\n                })\n                // Update yaxis range\n                this.latencyTimeData.ready=true;\n                this.latencyTimeLayout.ready=true;\n                this.latencyTimeSpinner.show=false;\n            },\n            processLatencyHourlyData(jsonDataRows){\n                this.latencyHourlySpinner={show:true,message:\"Sorting data...\"};\n                this.latencyHourlyData.ready=false;\n                this.latencyHourlyLayout.ready=false;\n                const latencyHourlyResults = {}\n                const addLatencyHourlyRecord = (record, index)=>{\n                    if(record){\n                        if(!latencyHourlyResults[index]){\n                            latencyHourlyResults[index] = new Array(24).fill();\n                            latencyHourlyResults[index] = latencyHourlyResults[index].map(()=>[]);\n                        }\n                        \n                        // Time is in nanoseconds, convert to ms\n                        const sendTime = record.end_stime/(10**6);\n                        const recvTime = record.end_rtime/(10**6);\n                        const latency = (recvTime-sendTime);\n                        const hours = moment(sendTime,\"x\").utc().hours();\n                        // Verify data is properly parsed\n                        if(!isNaN(hours) && !isNaN(latency)){\n                            latencyHourlyResults[index][hours].push(latency);\n                        }\n                    }\n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    if(curr.exp==\"DNS_local\"){ \n                        addLatencyHourlyRecord(curr.data.rst_list[0], curr.index)\n                    }else{\n                        addLatencyHourlyRecord(curr.data, curr.index);\n                    }\n                    this.latencyHourlySpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                Object.keys(latencyHourlyResults).forEach((index)=>{\n                    let prevLatency = null;\n                    latencyHourlyResults[index] = latencyHourlyResults[index].map((hourData)=>{\n                        const filteredHourData = hourData.filter((val)=>!!val);\n                        if(filteredHourData.length==0){\n                            return prevLatency;\n                        }\n                        const avgLatency = stats.mean(filteredHourData);\n                        prevLatency = avgLatency;\n                        return avgLatency; \n                    });\n                });\n                this.latencyHourlySpinner.message=\"Generating graph...\";\n                this.latencyHourlyData.data=[];\n                const markerBorderWidth = 2;\n                const utcHours = new Array(24).fill().map((v,i)=>i); \n                Object.keys(latencyHourlyResults).forEach((index)=>{\n                    const traceColor = Color.randomFromString(index+index+index);\n                    this.latencyHourlyData.data.push({\n                        x:utcHours,\n                        y:latencyHourlyResults[index],\n                        name:index,\n                        mode:\"lines+markers\",\n                        line:{\n                            color:traceColor.rgbString\n                        },\n                        marker:{\n                            color:\"rgba(0,0,0,0)\",\n                            line:{\n                                color:traceColor.rgbString,\n                                width:markerBorderWidth\n                            }\n                        }\n                    })\n                })\n                // Update yaxis range\n                this.latencyHourlyData.ready=true;\n                this.latencyHourlyLayout.ready=true;\n                this.latencyHourlySpinner.show=false;\n            },\n\n            processBandwidthTimeData(jsonDataRows){\n                this.bandwidthTimeSpinner={show:true,message:\"Sorting data...\"};\n                this.bandwidthTimeData.ready=false;\n                this.bandwidthTimeLayout.ready=false;\n                const bandwidthTimeResults = {}\n                const addBandwidthTimeRecord = (data, index)=>{\n                    bandwidthTimeResults[index] = bandwidthTimeResults[index] || {\n                        \"avail_band\":[],\n                        \"btnk_band\":[]\n                    };\n                    \n                    // Time is in nanoseconds, convert to ms\n                    const sendTime = data.ctrl_stime/(10**6);\n                    const timestamp = moment(sendTime,\"x\").utc().format(\"YYYY-MM-DD HH:mm:ss.SS\");\n\n                    if(data.avail_band && data.btnk_band){\n                        bandwidthTimeResults[index].avail_band.push({\n                            // Bandwidth is in bps, convert to Mbps\n                            \"bandwidth\":data.avail_band / (10**6),\n                            timestamp,\n                            sendTime\n                        });\n                        bandwidthTimeResults[index].btnk_band.push({\n                            // Bandwidth is in bps, convert to Mbps\n                            \"bandwidth\":data.btnk_band / (10**6),\n                            timestamp,\n                            sendTime\n                        });\n                    }\n                    \n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    addBandwidthTimeRecord(curr.data, curr.index);\n                    this.bandwidthTimeSpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                this.bandwidthTimeSpinner.message=\"Generating graph...\";\n                this.bandwidthTimeData.data=[];\n                const markerBorderWidth = 2;\n                Object.keys(bandwidthTimeResults).forEach((index)=>{\n                    const bandwidthTimeData = bandwidthTimeResults[index];\n                    const traceColor = Color.randomFromString(index+index+index);\n                    const altColor = new Color({'color':[traceColor.lchuv[0]+20,traceColor.lchuv[1],traceColor.lchuv[2]], type:'lchuv'})\n                    const graphColors = [traceColor,altColor];\n                    Object.keys(bandwidthTimeData).forEach((exp, i)=>{\n                        // Sort records by sendTime\n                        bandwidthTimeData[exp].sort((a,b)=>a.sendTime-b.sendTime)\n                        const traceColor = graphColors[i] || Color.random();\n                        this.bandwidthTimeData.data.push({\n                            x:bandwidthTimeData[exp].map(record=>record.timestamp),\n                            y:bandwidthTimeData[exp].map(record=>record.bandwidth),\n                            name:index+\" - \"+exp,\n                            mode:\"lines+markers\",\n                            line:{\n                                color:traceColor.rgbString\n                            },\n                            marker:{\n                                color:\"rgba(0,0,0,0)\",\n                                line:{\n                                    color:traceColor.rgbString,\n                                    width:markerBorderWidth\n                                }\n                            }\n                        })\n                    })\n                })\n                // Update yaxis range\n                this.bandwidthTimeData.ready=true;\n                this.bandwidthTimeLayout.ready=true;\n                this.bandwidthTimeSpinner.show=false;\n            },\n            processBandwidthHourlyData(jsonDataRows){\n                this.bandwidthHourlySpinner={show:true,message:\"Sorting data...\"};\n                this.bandwidthHourlyData.ready=false;\n                this.bandwidthHourlyLayout.ready=false;\n                const bandwidthHourlyExperiments = this.$store.state.experiments.filter((exp)=>exp.categories.includes(\"bandwidth\")).map(exp=>exp.name);\n                const bandwidthHourlyResults = {}\n                const addBandwidthHourlyRecord = (data)=>{\n                    if(!bandwidthHourlyResults.avail_band){\n                        bandwidthHourlyResults.avail_band = new Array(24).fill();\n                        bandwidthHourlyResults.avail_band = bandwidthHourlyResults.avail_band.map(()=>[]);\n                    }\n                    if(!bandwidthHourlyResults.btnk_band){\n                        bandwidthHourlyResults.btnk_band = new Array(24).fill();\n                        bandwidthHourlyResults.btnk_band = bandwidthHourlyResults.btnk_band.map(()=>[]);\n                    }\n                    \n                    // Time is in nanoseconds, convert to ms\n                    const sendTime = data.ctrl_stime/(10**6);\n                    const hours = moment(sendTime,\"x\").utc().hours();\n\n                    if(data.avail_band && data.btnk_band){\n                        // Bandwidth is in bps, convert to Mbps\n                        bandwidthHourlyResults.avail_band[hours].push(data.avail_band / (10**6));\n                        bandwidthHourlyResults.btnk_band[hours].push(data.btnk_band / (10**6));\n                    }\n                    \n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    if(bandwidthHourlyExperiments.includes(curr.exp)){\n                        addBandwidthHourlyRecord(curr.data);\n                    }\n                    this.bandwidthHourlySpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                const meanBandwidthHourlyResults = {}\n                // Standard deviation data for error bars\n                const stdevBandwidthHourlyResults = {}\n                Object.keys(bandwidthHourlyResults).forEach((expName)=>{\n                    let prevAvgBandwidth = null;\n                    let prevStdevBandwidth = null;\n                    meanBandwidthHourlyResults[expName] = bandwidthHourlyResults[expName].map((hourData)=>{\n                        const filteredHourData = hourData.filter((val)=>!!val);\n                        if(filteredHourData.length==0){\n                            return prevAvgBandwidth;\n                        }\n                        const avgBandwidth =  stats.mean(filteredHourData);\n                        prevAvgBandwidth = avgBandwidth;\n                        return avgBandwidth; \n                    });\n                    stdevBandwidthHourlyResults[expName] = bandwidthHourlyResults[expName].map((hourData)=>{\n                        const filteredHourData = hourData.filter((val)=>!!val);\n                        if(filteredHourData.length==0){\n                            return prevStdevBandwidth;\n                        }\n                        const stdevBandwidth =  stats.sampleStdev(filteredHourData);\n                        prevStdevBandwidth = stdevBandwidth;\n                        return stdevBandwidth; \n                    });\n                });\n                this.bandwidthHourlySpinner.message=\"Generating graph...\";\n                this.bandwidthHourlyData.data=[];\n                const markerBorderWidth = 2;\n                const utcHours = new Array(24).fill().map((v,i)=>i); \n                Object.keys(meanBandwidthHourlyResults).forEach((exp,i)=>{\n                    const traceColor = Object.values(this.graphColor)[i] || Color.random();\n                    this.bandwidthHourlyData.data.push({\n                        x:utcHours,\n                        y:meanBandwidthHourlyResults[exp],\n                        error_y: {\n                            type: 'data',\n                            array: stdevBandwidthHourlyResults[exp],\n                            visible: true,\n                        },\n                        name:exp,\n                        mode:\"lines+markers\",\n                        line:{\n                            color:traceColor.rgbString\n                        },\n                        marker:{\n                            color:\"rgba(0,0,0,0)\",\n                            line:{\n                                color:traceColor.rgbString,\n                                width:markerBorderWidth\n                            }\n                        }\n                    })\n                })\n                // Update yaxis range\n                this.bandwidthHourlyData.ready=true;\n                this.bandwidthHourlyLayout.ready=true;\n                this.bandwidthHourlySpinner.show=false;\n            },\n            processRTTTimeData(jsonDataRows){\n                this.rttTimeSpinner={show:true,message:\"Sorting data...\"};\n                this.rttTimeData.ready=false;\n                this.rttTimeLayout.ready=false;\n                const rttTimeResults = {}\n                const addRTTTimeRecord = (record, index)=>{\n                    if(record){   \n                        // Time is in nanoseconds, convert to ms\n                        const sendTime = record.ctrl_stime/(10**6);\n                        const recvTime = record.ctrl_rtime/(10**6);\n                        const rtt = (recvTime-sendTime);\n                        const timestamp = moment(sendTime,\"x\").utc().format(\"YYYY-MM-DD HH:mm:ss.SS\");\n                        // Verify data is properly parsed\n                        if(!isNaN(rtt)){\n                            if(!rttTimeResults[index]){\n                                rttTimeResults[index] = [];\n                            }\n                            rttTimeResults[index].push({\n                                timestamp,\n                                rtt,\n                                sendTime\n                            });\n                        }\n                    }\n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    if(curr.exp==\"DNS_local\"){ \n                        addRTTTimeRecord(curr.data.rst_list[0], curr.index);\n                    }else{\n                        addRTTTimeRecord(curr.data, curr.index);\n                    }\n                    this.rttTimeSpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                this.rttTimeSpinner.message=\"Generating graph...\";\n                this.rttTimeData.data=[];\n                const markerBorderWidth = 2;\n                // Sort records by sendTime\n                Object.keys(rttTimeResults).forEach((index)=>{\n                    const traceColor = Color.randomFromString(index+index+index);\n                    const rttTimeData = rttTimeResults[index];\n                    rttTimeData.sort((a,b)=>a.sendTime-b.sendTime);\n                    this.rttTimeData.data.push({\n                        x:rttTimeData.map(record=>record.timestamp),\n                        y:rttTimeData.map(record=>record.rtt),\n                        name:index,\n                        mode:\"lines+markers\",\n                        line:{\n                            color:traceColor.rgbString\n                        },\n                        marker:{\n                            color:\"rgba(0,0,0,0)\",\n                            line:{\n                                color:traceColor.rgbString,\n                                width:markerBorderWidth\n                            }\n                        }\n                    })\n                });\n                // Update yaxis range\n                this.rttTimeData.ready=true;\n                this.rttTimeLayout.ready=true;\n                this.rttTimeSpinner.show=false;\n            },\n            processRTTHourlyData(jsonDataRows){\n                this.rttHourlySpinner={show:true,message:\"Sorting data...\"};\n                this.rttHourlyData.ready=false;\n                this.rttHourlyLayout.ready=false;\n                const rttHourlyResults = {}\n                const addRTTHourlyRecord = (record, index)=>{\n                    if(!rttHourlyResults[index]){\n                        rttHourlyResults[index] = new Array(24).fill();\n                        rttHourlyResults[index] = rttHourlyResults[index].map(()=>[]);\n                    }\n                    if(record){\n                        // Time is in nanoseconds, convert to ms\n                        const sendTime = record.ctrl_stime/(10**6);\n                        const recvTime = record.ctrl_rtime/(10**6);\n                        const rtt = (recvTime-sendTime);\n                        const hours = moment(sendTime,\"x\").utc().hours();\n                        // Verify data is properly parsed\n                        if(!isNaN(hours) && !isNaN(rtt)){\n                            rttHourlyResults[index][hours].push(rtt);\n                        }\n                    }\n                }\n                let processedRows = 0;\n                jsonDataRows.forEach((curr)=>{\n                    if(curr.exp==\"DNS_local\"){ \n                        addRTTHourlyRecord(curr.data.rst_list[0], curr.index)\n                    }else{\n                        addRTTHourlyRecord(curr.data, curr.index);\n                    }\n                    this.rttHourlySpinner = {\n                        show:true,\n                        message:`Sorting data (${Math.ceil(processedRows/jsonDataRows.length*100)}%)`\n                    };\n                    processedRows++;\n                });\n                let prevAvgRTT = null;\n                let prevStdevRTT = null;\n                console.log(rttHourlyResults);\n                this.rttHourlySpinner.message=\"Generating graph...\";\n                this.rttHourlyData.data=[];\n                const markerBorderWidth = 2;\n                const utcHours = new Array(24).fill().map((v,i)=>i); \n                Object.keys(rttHourlyResults).forEach((index)=>{\n                    const rttHourlyData = rttHourlyResults[index];\n                    const meanRTTHourlyData= rttHourlyData.map((hourData)=>{\n                    const filteredHourData = hourData.filter((val)=>!!val);\n                        if(filteredHourData.length==0){\n                            return prevAvgRTT;\n                        }\n                        const avgRTT = stats.mean(filteredHourData);\n                        prevAvgRTT = avgRTT;\n                        return avgRTT; \n                    });\n                    const stdevRTTHourlyData = rttHourlyData.map((hourData)=>{\n                        const filteredHourData = hourData.filter((val)=>!!val);\n                        if(filteredHourData.length==0){\n                            return prevStdevRTT;\n                        }\n                        const stdevRTT =  stats.sampleStdev(filteredHourData);\n                        prevStdevRTT = stdevRTT;\n                        return stdevRTT; \n                    });\n                    const traceColor = Color.randomFromString(index+index+index);\n                    this.rttHourlyData.data.push({\n                        x:utcHours,\n                        y:meanRTTHourlyData,\n                        error_y: {\n                            type: 'data',\n                            array: stdevRTTHourlyData,\n                            visible: true,\n                        },\n                        name:index,\n                        mode:\"lines+markers\",\n                        line:{\n                            color:traceColor.rgbString\n                        },\n                        marker:{\n                            color:\"rgba(0,0,0,0)\",\n                            line:{\n                                color:traceColor.rgbString,\n                                width:markerBorderWidth\n                            }\n                        }\n                    })\n                })\n                // Update yaxis range\n                this.rttHourlyData.ready=true;\n                this.rttHourlyLayout.ready=true;\n                this.rttHourlySpinner.show=false;\n            },\n            initGraphData(){\n                const spinnerList = [\n                    this.latencyTimeSpinner,\n                ]\n                const graphList = [\n                    {\n                        f:this.processLatencyTimeData,\n                        data:this.latencyTimeData,\n                        category:'latency'\n                    },\n                    {\n                        f:this.processLatencyHourlyData,\n                        data:this.latencyHourlyData,\n                        category:'latency'\n                    },\n                    {\n                        f:this.processBandwidthTimeData,\n                        data:this.bandwidthTimeData,\n                        category:'bandwidth'\n                    },\n                    {\n                        f:this.processBandwidthHourlyData,\n                        data:this.bandwidthHourlyData,\n                        category:'bandwidth'\n                    },\n                    {\n                        f:this.processRTTTimeData,\n                        data:this.rttTimeData,\n                        category:'rtt'\n                    },\n                    {\n                        f:this.processRTTHourlyData,\n                        data:this.rttHourlyData,\n                        category:'rtt'\n                    },\n                ]\n                spinnerList.forEach((spinner)=>{\n                    spinner.show=true;\n                    spinner.message=\"Fetching data...\";\n                })\n                let {toTime,fromTime}=this.timeRange;\n                // Default fromTime is 0\n                fromTime = (fromTime!=null) ? fromTime : 0;\n                // Default toTime is current time\n                toTime = (toTime!=null) ? toTime : parseFloat(moment().format(\"X\"));\n                this.$store.dispatch('loadData', fromTime).then(()=>{\n                    // Get graph colors\n                    this.$store.state.experiments.forEach((exp)=>{\n                        this.graphColor[exp.name] = new Color({\"type\":\"hex\", \"color\":exp.color});\n                    })\n                    const jsonDataRows = this.$store.state.data.filter((row, i)=>{\n                        const endpoints = this.$store.state.endpoints.reduce((acc,curr)=>{\n                            const id = \"M\"+curr.monitor;\n                            const shortDescription = id+\" - \"+curr.description.split(/[\\s_]/)[0]\n                            acc[id]={\n                                \"shortDescription\":shortDescription,\n                                ...curr\n                            };\n                            return acc;\n                        }, {});\n                        if(row.monitor){\n                            const index = \"M\"+row.monitor; \n                            row.index = endpoints[index].shortDescription;\n                            spinnerList.forEach((spinner)=>{\n                                spinner.show=true;\n                                spinner.message=`Filtering data (${Math.ceil(i/this.$store.state.data.length*100)}%)`\n\n                            })\n                            return (this.experimentIDs==null || \n                                (Array.isArray(this.experimentIDs) && this.experimentIDs.includes(row.exp))\n                            )\n                            && (\n                                (row.start >= fromTime && row.start <= toTime) ||\n                                (row.end>=fromTime && row.end<=toTime)\n                            )\n                        }else{\n                            return false;\n                        }\n                    });\n                    if(this.experimentIDs){\n                        graphList.forEach((graph)=>{\n                            const currentExp = this.$store.state.experiments.find((exp)=>this.experimentIDs.includes(exp.name));\n                            if(currentExp.categories.includes(graph.category)){\n                                graph.data.visible = true;\n                                graph.f(jsonDataRows);\n                            }else{\n                                graph.data.visible = false;\n                            }\n                        });  \n                    }\n                })\n            }\n        },\n        watch:{\n            experimentIDs:{\n                immediate:true,\n                deep:true,\n                async handler(){   \n                    await this.$nextTick();\n                    this.initGraphData();\n                }\n            },\n        }\n    }\n</script>\n<style lang='scss' scoped>\n    .endpoint-summary{\n        background-color: #FFF;\n        box-shadow: 3px 3px 5px rgba(0,0,0,0.1);\n    }\n    .experiment-section{\n        background-color: #FFF;\n        width: 90%;\n        margin: 5% 0;\n        box-sizing: border-box;\n        padding: 2em;\n        box-shadow: 3px 3px 5px rgba(0,0,0,0.1);  \n        line-height: 2em;\n        text-align: left; \n    }\n    .experiment-section-link{\n        color: #615E8A;\n        font-weight: 600;\n        text-transform: uppercase;\n        letter-spacing: 0.75px;\n        margin-top: 1em;\n        display: block;\n        text-decoration: none;\n    }\n    .graph-row{\n        margin: 2% 0;\n        .summary-key,\n        .summary-value{\n            padding: 2%;\n        }\n        .summary-section + .summary-section{\n            .summary-key,\n            .summary-value{\n                border-left: solid 1px rgba(0,0,0,0.1);\n            }\n        }\n        .summary-key{\n            background-color: #615E8A;\n            color: #FFF;\n            font-weight: bold;\n        }\n    }\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Experiments.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Experiments.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Experiments.vue?vue&type=template&id=0e685306&scoped=true&\"\nimport script from \"./Experiments.vue?vue&type=script&lang=js&\"\nexport * from \"./Experiments.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Experiments.vue?vue&type=style&index=0&id=0e685306&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0e685306\",\n  null\n  \n)\n\nexport default component.exports","module.exports = isNumber\n\n/**\n * Determine if something is a non-infinite javascript number.\n * @param  {Number}  n A (potential) number to see if it is a number.\n * @return {Boolean}   True for non-infinite numbers, false for all else.\n */\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}","import Color from \"ac-colors\"\nexport default {\n    data(){\n        return {\n            cdfSubdivisions:1000,\n            graphColor:{\n                \"primary\":new Color({\"type\":\"hex\", \"color\":\"#7FA44F\"}),\n                \"secondary\":new Color({\"type\":\"hex\", \"color\":\"#989998\"})\n            },\n            latencyHourlySpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            latencyHourlyData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            latencyHourlyLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"Average DNS Query Latency by Hour\",\n                    \"xaxis\":{\n                        \"title\":\"Hour of Day (UTC)\",\n                        \"range\":[0,23],\n                        \"dtick\":1\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Average Endpoint DNS Query Latency (ms)\",\n                    }\n                }\n            },\n            latencyTimeSpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            latencyTimeData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            latencyTimeLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"DNS Query Latency to Different DNS Resolvers over Time\",\n                    \"xaxis\":{\n                        \"title\":\"Date\",\n                        \"type\":\"date\"\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Endpoint DNS Query Latency (ms)\",\n                    }\n                }\n            },\n            latencyTimeCDFData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            latencyTimeCDFLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"CDF for DNS Query Latency to Different DNS Resolvers over Time\",\n                    \"xaxis\":{\n                        \"title\":\"Endpoint DNS Query Latency (ms)\",\n                        \"autorange\":false,\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Cumulative Probability\",\n                        \"autorange\":false,\n                        \"range\":[0,1],\n                    }\n                }\n            },\n            bandwidthTimeSpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            bandwidthTimeData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            bandwidthTimeLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"Available Bandwidth & Bottleneck Bandwidth to Controller over Time\",\n                    \"xaxis\":{\n                        \"title\":\"Date\",\n                        \"type\":\"date\"\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Measured Bandwidth (Mbps)\",\n                    }\n                }\n            },\n            bandwidthTimeCDFData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            bandwidthTimeCDFLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"CDF for Available Bandwidth & Bottleneck Bandwidth to Controller over Time\",\n                    \"xaxis\":{\n                        \"title\":\"Measured Bandwidth (Mbps)\",\n                        \"autorange\":false,\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Cumulative Probability\",\n                        \"autorange\":false,\n                        \"range\":[0,1],\n                    }\n                }\n            },\n            bandwidthHourlySpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            bandwidthHourlyData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            bandwidthHourlyLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"Average Available Bandwidth & Bottleneck Bandwidth to Controller by Hour\",\n                    \"xaxis\":{\n                        \"title\":\"Hour of Day (UTC)\",\n                        \"range\":[0,23],\n                        \"dtick\":1\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Average Measured Bandwidth (Mbps)\",\n                    }\n                }\n            },\n            rttTimeSpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            rttTimeData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            rttTimeLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"Endpoint Controller RTT over Time\",\n                    \"xaxis\":{\n                        \"title\":\"Date\",\n                        \"type\":\"date\"\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Endpoint Controller RTT (ms)\",\n                    }\n                }\n            },\n            rttHourlySpinner:{\n                show:true,\n                message:\"Generating graph...\"\n            },\n            rttHourlyData:{\n                \"ready\":false,\n                \"data\":[],\n            },\n            rttHourlyLayout:{\n                \"ready\":false,\n                \"layout\":{\n                    \"title\":\"Average Endpoint Controller RTT by Hour\",\n                    \"xaxis\":{\n                        \"title\":\"Hour of Day (UTC)\",\n                        \"range\":[0,23],\n                        \"dtick\":1\n                    },\n                    \"yaxis\":{\n                        \"title\":\"Average Endpoint Controller RTT (ms)\",\n                    }\n                }\n            },\n        }\n    },\n    computed:{\n        endpointGraphs(){\n            return [\n                { \"spinner\":this.latencyTimeSpinner, \"data\":this.latencyTimeData, \"layout\":this.latencyTimeLayout },\n                { \"spinner\":this.latencyTimeSpinner, \"data\":this.latencyTimeCDFData, \"layout\":this.latencyTimeCDFLayout },\n                { \"spinner\":this.latencyHourlySpinner, \"data\":this.latencyHourlyData, \"layout\":this.latencyHourlyLayout },\n                { \"spinner\":this.bandwidthTimeSpinner, \"data\":this.bandwidthTimeData, \"layout\":this.bandwidthTimeLayout },\n                { \"spinner\":this.bandwidthTimeSpinner, \"data\":this.bandwidthTimeCDFData, \"layout\":this.bandwidthTimeCDFLayout },\n                { \"spinner\":this.bandwidthHourlySpinner, \"data\":this.bandwidthHourlyData, \"layout\":this.bandwidthHourlyLayout },\n                { \"spinner\":this.rttTimeSpinner, \"data\":this.rttTimeData, \"layout\":this.rttTimeLayout },\n                { \"spinner\":this.rttHourlySpinner, \"data\":this.rttHourlyData, \"layout\":this.rttHourlyLayout },\n            ]\n        }\n    }\n}","\"use strict\";function _defineProperties(o,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,\"value\"in e&&(e.writable=!0),Object.defineProperty(o,e.key,e)}}function _createClass(o,r,t){return r&&_defineProperties(o.prototype,r),t&&_defineProperties(o,t),o}var Color=function(){function Color(o){var r=void 0===o?{color:[0,0,0],type:\"rgb\",precision:3,capitalize:!0}:o,t=r.color,e=void 0===t?[0,0,0]:t,n=r.type,a=void 0===n?\"rgb\":n,i=r.precision,l=void 0===i?3:i,u=r.capitalize,s=void 0===u||u;this.updateColor(e,a),this.precision=l,this.capitalize=s}return Color.prototype.updateColor=function updateColor(o,r){var t;if(void 0===r&&(r=\"rgb\"),\"string\"!=typeof r)throw new TypeError(\"Parameter 2 must be of type string.\");if(r=r.toLowerCase(),!Color.validTypes.includes(r))throw new TypeError(\"Parameter 2 '\"+r+\"' is not a valid type.\");switch(r){case\"rgb\":t=Color.rgbToXyz(o);break;case\"hsl\":t=Color.rgbToXyz(Color.hslToRgb(o));break;case\"hex\":t=Color.rgbToXyz(Color.hexToRgb(o));break;case\"lab\":t=Color.labToXyz(o);break;case\"lchab\":t=Color.labToXyz(Color.lchABToLab(o));break;case\"luv\":t=Color.luvToXyz(o);break;case\"lchuv\":t=Color.luvToXyz(Color.lchUVToLuv(o));break;case\"xyz\":case\"default\":this._xyz=o,this._rgb=Color.xyzToRgb(this._xyz),this._hsl=Color.rgbToHsl(this._rgb),this._hex=Color.rgbToHex(this._rgb),this._lab=Color.xyzToLab(this._xyz),this._lchab=Color.labToLCHab(this._lab),this._luv=Color.xyzToLuv(this._xyz),this._lchuv=Color.luvToLCHuv(this._luv)}\"xyz\"!==r&&this.updateColor(t,\"xyz\")},Color.rgbToHsl=function rgbToHsl(o){var r=o[0]/255,t=o[1]/255,e=o[2]/255,n=Math.max(r,t,e),a=Math.min(r,t,e),i=(n+a)/2,l=0,u=0;return n!==a&&(l=i<.5?(n-a)/(n+a):(n-a)/(2-n-a),u=r===n?(t-e)/(n-a):t===n?2+(e-r)/(n-a):4+(r-t)/(n-a)),[(u=(u*=60)<0?u%360+360:u)+0,(l*=100)+0,(i*=100)+0]},Color.hslToRgb=function hslToRgb(o){var r=o[0],t=o[1],e=o[2];isFinite(r)||(r=0),isFinite(t)||(t=0),isFinite(e)||(e=0),r=r<0?r%360+360:r,e/=100,t/=100,r/=60;var n=(1-Math.abs(2*e-1))*t,a=n*(1-Math.abs(r%2-1)),i=e-n/2,l=r<1?[n,a,0]:r<2?[a,n,0]:r<3?[0,n,a]:r<4?[0,a,n]:r<5?[a,0,n]:[n,0,a];return l.map(function(o){return Math.round(255*(o+i))+0})},Color.rgbToHex=function rgbToHex(o){function S(o){var r=o.toString(16);return 1===r.length?\"0\"+r:r}var r=o[0],t=o[1],e=o[2];return\"#\"+S(r)+S(t)+S(e)},Color.hexToRgb=function hexToRgb(o){o=o.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,function(o,r,t,e){return r+r+t+t+e+e});var r=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(o);return r?[parseInt(r[1],16),parseInt(r[2],16),parseInt(r[3],16)]:null},Color.rgbToXyz=function rgbToXyz(o){function ea(o){return o<=.04045?o/12.92:Math.pow((o+.055)/1.055,2.4)}var r=o[0]/255,t=o[1]/255,e=o[2]/255,n=ea(r),a=ea(t),i=ea(e);return[100*(.4124*n+.3576*a+.1805*i)+0,100*(.2126*n+.7152*a+.0722*i)+0,100*(.0193*n+.1192*a+.9505*i)+0]},Color.xyzToRgb=function xyzToRgb(o){function ta(o){return o<=.0031308?12.92*o:1.055*Math.pow(o,1/2.4)-.055}var r=o[0]/100,t=o[1]/100,e=o[2]/100,n=-.9689307147293197*r+1.8757560608852415*t+.041517523842953964*e,a=.055710120445510616*r+-.2040210505984867*t+1.0569959422543882*e,i=ta(3.2406254773200533*r-1.5372079722103187*t-.4986285986982479*e),l=ta(n),u=ta(a);return[Math.round(255*i)+0,Math.round(255*l)+0,Math.round(255*u)+0]},Color.xyzToLab=function xyzToLab(o){function Fa(o){return 216/24389<o?n(o):(24389/27*o+16)/116}var r=o[0]/Color.d65[0],t=o[1]/Color.d65[1],e=o[2]/Color.d65[2],n=null!=Math.cbrt?Math.cbrt:function(o){return Math.pow(o,1/3)},a=Fa(r),i=Fa(t);return[116*i-16,0+500*(a-i),0+200*(i-Fa(e))]},Color.labToXyz=function labToXyz(o){var r=o[0],t=o[1],e=216/24389,n=24389/27,a=(r+16)/116,i=a-o[2]/200,l=t/500+a,u=Math.pow(l,3)>e?Math.pow(l,3):(116*l-16)/n,s=8<r?Math.pow((r+16)/116,3):r/n,c=Math.pow(i,3)>e?Math.pow(i,3):(116*i-16)/n;return[u*Color.d65[0]+0,s*Color.d65[1]+0,c*Color.d65[2]+0]},Color.labToLCHab=function labToLCHab(o){var r=o[1],t=Math.abs(o[2])<Color.maxZeroTolerance?0:o[2],e=Math.sqrt(r*r+t*t),n=0<=Math.atan2(t,r)?Math.atan2(t,r)/Math.PI*180:Math.atan2(t,r)/Math.PI*180+360;return[o[0]+0,e+0,0+n]},Color.lchABToLab=function lchABToLab(o){var r=o[1],t=o[2],e=r*Math.cos(t/180*Math.PI),n=r*Math.sin(t/180*Math.PI);return[o[0]+0,0+e,0+n]},Color.xyzToLuv=function xyzToLuv(o){var r=o[0],t=o[1],e=o[2],n=Color.d65[0],a=Color.d65[1],i=Color.d65[2],l=9*a/(n+15*a+3*i),u=4*n/(n+15*a+3*i);if(0===r&&0===t&&0===e)return[0,0,0];var s=9*t/(r+15*t+3*e),c=4*r/(r+15*t+3*e),h=t/a,C=null!=Math.cbrt?Math.cbrt:function(o){return Math.pow(o,1/3)},p=216/24389<h?116*C(h,1/3)-16:24389/27*h;return[0+p,0+13*p*(c-u),0+13*p*(s-l)]},Color.luvToXyz=function luvToXyz(o){var r=o[0],t=o[1],e=o[2],n=Color.d65[0],a=Color.d65[1],i=Color.d65[2],l=9*a/(n+15*a+3*i),u=4*n/(n+15*a+3*i),s=8<r?Math.pow((r+16)/116,3):r/(24389/27),c=-5*s,h=(52*r/(t+13*r*u)-1)/3||0,C=((s*(39*r/(e+13*r*l)-5)||0)-c)/(h- -1/3);return[100*C+0,100*s+0,100*(C*h+c)+0]},Color.luvToLCHuv=function luvToLCHuv(o){var r=o[0],t=Math.abs(o[1])<Color.maxZeroTolerance?0:o[1],e=Math.abs(o[2])<Color.maxZeroTolerance?0:o[2],n=Math.sqrt(t*t+e*e),a=180*Math.atan2(e,t)/Math.PI;return[r+0,n+0,(a=0<=a?a:a+360)+0]},Color.lchUVToLuv=function lchUVToLuv(o){var r=o[0],t=o[1],e=o[2]/180*Math.PI;return[r+0,0+t*Math.cos(e),0+t*Math.sin(e)]},Color.luminance=function luminance(o,r){if(void 0===r&&(r=\"rgb\"),\"string\"!=typeof r)throw new TypeError(\"Parameter 2 must be of type string.\");if(r=r.toLowerCase(),!Color.validTypes.includes(r))throw new TypeError(\"Parameter 2 '\"+r+\"' is not a valid type.\");\"rgb\"!==r&&(o=new Color({color:o,type:r}).rgb);for(var t=0;t<o.length;t++)o[t]/=255,o[t]<.03928?o[t]/=12.92:o[t]=Math.pow((o[t]+.055)/1.055,2.4);return.2126*o[0]+.7152*o[1]+.0722*o[2]},Color.random=function random(){return new Color({color:[255,255,255].map(function(o){return Math.round(o*Math.random())})})},Color.randomFromString=function randomFromString(o){void 0===o&&(o=\"\");function mc(o){for(var r=4294967295,t=0;t<o.length;t++){var e=4026531840&(r=(r<<4)+o.charCodeAt(t));0!=e&&(r^=e>>>24,r^=e)}return Math.abs(r)}var r=mc(o),t=mc(o+r);return new Color({color:[r%256,t%256,mc(o+t)%256]})},Color.randomOfType=function randomOfType(o){if(void 0===o&&(o=\"rgb\"),\"string\"!=typeof o)throw new TypeError(\"Parameter 1 must be of type string.\");if(o=o.toLowerCase(),!Color.validTypes.includes(o))throw new TypeError(\"Parameter 1 '\"+o+\"' is not a valid type.\");return Color.random()[o]},Color.randomOfTypeFormatted=function randomOfTypeFormatted(o,r,t){if(void 0===o&&(o=\"rgb\"),void 0===r&&(r=!0),void 0===t&&(t=3),\"string\"!=typeof o)throw new TypeError(\"Parameter 1 must be of type string.\");if(o=o.toLowerCase(),!Color.validTypes.includes(o))throw new TypeError(\"Parameter 1 '\"+o+\"' is not a valid type.\");var e=Color.random();return e.capitalize=r,e.precision=t,e[o+\"String\"]},Color.contrastTextColor=function contrastTextColor(o,r){if(void 0===r&&(r=\"rgb\"),\"string\"!=typeof r)throw new TypeError(\"Parameter 2 must be of type string.\");if(r=r.toLowerCase(),!Color.validTypes.includes(r))throw new TypeError(\"Parameter 2 '\"+r+\"' is not a valid type.\");var t=Color.contrastRatio(new Color({color:[255,255,255]}),new Color({color:o,type:r}));return Color.contrastRatio(new Color({color:[0,0,0]}),new Color({color:o,type:r}))<t?\"#FFFFFF\":\"#000000\"},Color.contrastRatio=function contrastRatio(o,r){if(!(o instanceof Color))throw new TypeError(\"Parameter 1 must be of type Color.\");if(!(r instanceof Color))throw new TypeError(\"Parameter 2 must be of type Color.\");var t=Color.luminance(o.rgb)+.05,e=Color.luminance(r.rgb)+.05;return t<e?e/t:t/e},_createClass(Color,[{key:\"rgb\",get:function get(){return this._rgb},set:function set(o){this.updateColor(o,\"rgb\")}},{key:\"rgbString\",get:function get(){var o=\"RGB(\"+this.rgb.join(\", \")+\")\";return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"hsl\",get:function get(){return this._hsl},set:function set(o){this.updateColor(o,\"hsl\")}},{key:\"hslString\",get:function get(){var r=this,o=\"HSL(\"+this.hsl.map(function(o){return o.toFixed(r.precision)}).join(\", \")+\")\";return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"hex\",get:function get(){return this._hex},set:function set(o){this.updateColor(o,\"hex\")}},{key:\"hexString\",get:function get(){var o=this._hex;return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"xyz\",get:function get(){return this._xyz},set:function set(o){this.updateColor(o,\"xyz\")}},{key:\"xyzString\",get:function get(){var r=this,o=\"XYZ(\"+this.xyz.map(function(o){return o.toFixed(r.precision)}).join(\", \")+\")\";return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"lab\",get:function get(){return this._lab},set:function set(o){this.updateColor(o,\"lab\")}},{key:\"labString\",get:function get(){var r=this,o=\"LAB(\"+this.lab.map(function(o){return o.toFixed(r.precision)}).join(\", \")+\")\";return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"lchab\",get:function get(){return this._lchab},set:function set(o){this.updateColor(o,\"lchab\")}},{key:\"lchabString\",get:function get(){var r=this,o=this.lchab.map(function(o){return o.toFixed(r.precision)});return this.capitalize?\"LCHab(\"+o.join(\", \")+\")\":\"lchAB(\"+o.join(\", \")+\")\"}},{key:\"luv\",get:function get(){return this._luv},set:function set(o){this.updateColor(o,\"luv\")}},{key:\"luvString\",get:function get(){var r=this,o=\"LUV(\"+this.luv.map(function(o){return o.toFixed(r.precision)}).join(\", \")+\")\";return this.capitalize?o.toUpperCase():o.toLowerCase()}},{key:\"lchuv\",get:function get(){return this._lchuv},set:function set(o){this.updateColor(o,\"lchuv\")}},{key:\"lchuvString\",get:function get(){var r=this,o=this.lchuv.map(function(o){return o.toFixed(r.precision)});return this.capitalize?\"LCHuv(\"+o.join(\", \")+\")\":\"lchUV(\"+o.join(\", \")+\")\"}}]),Color}();Color.validTypes=[\"rgb\",\"hex\",\"hsl\",\"xyz\",\"lab\",\"lchab\",\"luv\",\"lchuv\"],Color.d65=[95.05,100,108.9],Color.maxZeroTolerance=Math.pow(10,-12),module.exports=Color;"],"sourceRoot":""}